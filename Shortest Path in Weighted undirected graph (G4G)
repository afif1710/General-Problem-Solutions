class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
        unordered_map<int, vector<pair<int, int>>> adj;
        
        for(auto &edge: edges){
            int u = edge[0];
            int v = edge[1];
            int w = edge[2];
            
            adj[u].push_back({v, w});
            adj[v].push_back({u, w});
        }
        
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        
        vector<int> res(n+1, INT_MAX);
        res[1] = 0;
        pq.push({0, 1});
        vector<int> parent(n+1);
        for(int i = 1 ; i<=n; i++){
            parent[i] = i;
        }
        while(!pq.empty()){
            int Node = pq.top().second;
            int dist = pq.top().first;
            pq.pop();
            for(auto &vec: adj[Node]){
                int adjNode = vec.first;
                int d       = vec.second;
                
                if(d+dist < res[adjNode]){
                    res[adjNode] = d+dist;
                    pq.push({d+dist, adjNode});
                    parent[adjNode] = Node;     //Saving parents to keep track of the shortest distance
                }
            }
        }
        
        vector<int> path;
        int dest = n;
        if(res[dest] == INT_MAX){
            return {-1};
        }
        
        while(parent[dest] != dest){    //while we don't get to 1 we push nodes of the shortest distance to the path
            path.push_back(dest);
            dest = parent[dest];
        }
        path.push_back(1);      //pushing 1 bcoz when 1 == 1 , we do not enter the loop 
        reverse(path.begin(), path.end());
    
        // prepend distance, adding the weight of the path  and then the nodes
        path.insert(path.begin(),res[n]);
        return path;
        
    }
};





